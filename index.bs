<pre class='metadata'>
Group: WHATWG
H1: <code>multipart/form-data</code>
Title: multipart/form-data
Shortname: formdata
Status: DREAM
Text Macro: TWITTER (unused)
Text Macro: LOGO https://resources.whatwg.org/logo.svg
Metadata Include: Participate off, Commits off, Tests off
!Repository: <a href=https://github.com/andreubotella/multipart-form-data>GitHub</a>
Abstract: A web-spec definition of the <a><code>multipart/form-data</code></a> format and related
          algorithms, meant for inclusion in the WHATWG standards.
</pre>

Introduction {#intro}
=====================

An <dfn export>entry list</dfn> is a list of [=entry list/entries=], typically representing the
contents of a form. An <dfn export for="entry list">entry</dfn> is a tuple consisting of a <dfn
export for="entry list">name</dfn> (a [=scalar value string=]) and a <dfn export for="entry
list">value</dfn> (either a [=scalar value string=] or a {{File}}).

<p class="XXX">These definitions currently live in the XHR spec as part of the {{FormData}}
definition, but they should probably be moved to HTML.

The <dfn export><code>multipart/form-data</code></dfn> format provides a way to encode an [=entry
list=], which, unlike the <a><code>application/x-www-form-urlencoded</code></a> format, can transmit
file contents.

<code>multipart/form-data</code> serializing {#serializing}
===========================================================

A <dfn export for="multipart/form-data" lt="boundary"><code>multipart/form-data</code>
boundary</dfn> is a [=byte sequence=] such that:

*   its length is greater or equal to 27 and lesser or equal to 70, and
*   it is composed by bytes in the ranges 0x30 to 0x39, 0x41 to 0x5A, or 0x61 to 0x7A, inclusive
    ([=ASCII alphanumeric=]), or which are 0x27 ('), 0x2D (-) or 0x5F (_).

To <dfn export for="multipart/form-data/boundary">generate</dfn> a <a
for="multipart/form-data" lt="boundary"><code>multipart/form-data</code> boundary</a>, return an
[=implementation-defined=] byte sequence which fullfills the conditions for boundaries, such that
part of it is randomly generated, with a minimum entropy of 95 bits.

<p class="note">Previous definitions of <a><code>multipart/form-data</code></a> <span
class="allow-2119">required</span> that the [=multipart/form-data/boundary=] associated with a
<code>multipart/form-data</code> payload not be present anywhere in the payload other than as a
delimiter, although they allow for generating the [=multipart/form-data/boundary=]
probabilistically. Since this generation algorithm isseparate from a payload, however, it has to
specify a minimum entropy instead. [[RFC7578]] [[RFC2046]]

<p class="note">If a user agent generates <a><code>multipart/form-data</code></a> boundaries with a
length of 27 and an entropy of 95 bits, given a payload made specifically to generate collisions
with that user agent's boundaries, the expected length of the payload before a collision is found is
well over a yottabyte.

<hr>

<div algorithm="escape a multipart/form-data name">

To <dfn>escape a <code>multipart/form-data</code> name</dfn> with a string |name|, an optional
[=/encoding=] |encoding| (default [=UTF-8=]) and an optional boolean <dfn for="escape
name">|isFilename|</dfn> (default false):

1.  If |isFilename| is true:
    1.  Set |name| to the result of [=string/converting=] |name| into a [=scalar value string=].

    Otherwise:
    1.  Replace every occurrence of U+000D (CR) not followed by U+000A (LF), and every occurrence of
        U+000A (LF) not preceded by U+000D (CR), in |name|, by a string consisting of U+000D (CR)
        and U+000A (LF).
1.  Let |encoded| be the result of [=/encode|encoding=] |name| with |encoding|, converted to a byte
    sequence.
1.  Replace every 0x0A (LF) bytes in |encoded| with the byte sequence `<code>%0A</code>`, 0x0D (CR)
    with `<code>%0D</code>` and 0x22 (") with `<code>%22</code>`.
1.  Return |encoded|.

</div>

<div algorithm="multipart/form-data chunk serializer">

The <dfn export><code>multipart/form-data</code> chunk serializer</dfn> takes an [=entry list=]
|entries| and an optional [=/encoding=] |encoding| (default [=UTF-8=]), and returns a tuple of a
<a for="multipart/form-data" lt="boundary"><code>multipart/form-data</code> boundary</a> and a list
of chunks, each of which can be either a byte sequence or a {{File}}:

1.  Set |encoding| to the result of [=getting an output encoding=] from |encoding|.
1.  Let |boundary| be the result of [=multipart/form-data/boundary/generating=] a
    <a for="multipart/form-data" lt="boundary"><code>multipart/form-data</code> boundary</a>.
1.  Let |output chunks| be an empty list.
1.  [=list/For each=] |entry| in |entries|:
    1.  Let |chunk| be a byte sequence containing `<code>--</code>`, followed by |boundary|,
        followed by 0x0D 0x0A (CR LF).
    1.  Append `<code>Content-Disposition: form-data; name="</code>`, followed by the result of
        <a>escaping a <code>multipart/form-data</code> name</a> given |entry|'s [=entry list/name=]
        and |encoding|, followed by 0x22 ("), to |chunk|.
    1.  Let |value| be |entry|'s [=entry list/value=].
    1.  If |value| is a string:
        1.  Append 0x0D 0x0A 0x0D 0x0A (CR LF CR LF) to |chunk|.
        1.  Replace every occurrence of U+000D (CR) not followed by U+000A (LF), and every
            occurrence of U+000A (LF) not preceded by U+000D (CR), in |value|, by a string
            consisting of U+000D (CR) and U+000A (LF).
        1.  Append the result of [=/encode|encoding=] |value| with |encoding|, converted to a byte
            sequence, to |chunk|.
        1.  Append 0x0D 0x0A (CR LF) to |chunk|.
        1.  Append |chunk| to |output chunks|.

        Otherwise:
        1.  [=Assert=]: |value| is a {{File}}.
        1.  Append `<code>; filename="</code>`, followed by the result of <a>escaping a
            <code>multipart/form-data</code> name</a> given |value|'s {{File/name}} with |encoding|
            and <a for="escape name"><var ignore>isFilename</var></a> set to true, followed by
            0x22 0x0D 0x0A (" CR LF), to |chunk|.
        1.  Append `<code>Content-Type: </code>`, followed by the result of [=isomorphic encoding=]
            |value|'s {{Blob/type}}, to |chunk|.
        1.  Append 0x0D 0x0A 0x0D 0x0A (CR LF CR LF) to |chunk|.
        1.  Append |chunk|, followed by |value|, followed by the byte sequence 0x0D 0x0A (CR LF), to
            |output chunks|.
1.  Append the byte sequence containing `<code>--</code>`, followed by |boundary|, followed by
    `<code>--</code>`, followed by 0x0D 0x0A (CR LF), to |output chunks|.
1.  Return the tuple |boundary| / |output chunks|.

</div>

<p class="XXX">This matches the behavior Gecko will have once <a
href="https://bugzilla.mozilla.org/show_bug.cgi?id=1686765">bug 1686765</a> is closed. Chromium's
behavior also seems to match, except that it doesn't yet perform newline normalizations at the
serialization layer, which will be fixed in <a
href="https://bugs.chromium.org/p/chromium/issues/detail?id=1167095">issue 1167095</a>. I haven't
yet checked WebKit.

<hr>

<div algorithm="length of a multipart/form-data payload">

The <dfn export for="multipart/form-data">length</dfn> of a <a><code>multipart/form-data</code></a>
payload, given a list of chunks |chunks| which can be either byte sequences or {{File}}s, is the
result of running the following steps:

1.  Let |length| be 0.
1.  [=list/For each=] |chunk| in |chunks|:
    1.  If |chunk| is a byte sequence:
        1.  Increase |length| by |chunk|'s length.

        Otherwise:
        1.  [=Assert=]: |chunk| is a {{File}}.
        1.  Increase |length| by |chunk|'s {{Blob/size}}.
1.  Return |length|.

</div>

<div algorithm="create a multipart/form-data readable stream">

To <dfn export>create a <code>multipart/form-data</code> readable stream</dfn> from a list of chunks
|chunks| which can be either byte sequences or {{File}}s, run the following steps:

1.  Let |file stream| be null.
1.  Let |stream| be a [=new=] {{ReadableStream}}.
1.  Let |pull algorithm| be an algorithm that runs the following steps:
    <dl class="switch">
      : if |file stream| is null and |chunks| is not empty
      ::  1.  If |chunks|[0] is a byte sequence, [=ReadableStream/enqueue=] a {{Uint8Array}} object
              wrapping an {{ArrayBuffer}} containing |chunks|[0] into |stream|.
          1.  Otherwise:
              1.  [=Assert=]: |chunks|[0] is a {{File}} object.
              1.  Set |file stream| to the result of running |chunks|[0]'s {{Blob/stream}} method.
              1.  Run |pull algorithm|.
          1.  [=list/Remove=] the first item from |chunks|.
      : if |file stream| is null and |chunks| is empty
      ::  1.  [=ReadableStream/Close=] |stream|.
      : if |file stream| is not null
      ::  1.  Let |read request| be a new [=read request=] with the following [=struct/items=]:
              : [=read request/chunk steps=], given |chunk|
              ::  1.  If |chunk| is not a {{Uint8Array}} object, [=ReadableStream/error=] |stream|
                      with a {{TypeError}} and abort these steps.
                  1.  [=ReadableStream/Enqueue=] |chunk| into |stream|.
              : [=read request/close steps=]
              ::  1.  Set |file stream| to null.
                  1.  Run |pull algorithm|.
              : [=read request/error steps=], given |e|
              ::  1.  [=ReadableStream/Error=] |stream| with |e|.
          1.  Let |reader| be the result of [=ReadableStream/getting a reader=] for |file stream|.
          1.  [=ReadableStreamDefaultReader/Read a chunk=] from |reader| with |read request|.

    </dl>
1.  Let |cancel algorithm| be an algorithm that runs the following steps, given |reason|:
    1.  If |file stream| is not null, [=ReadableStream/cancel=] |file stream| with |reason|.
1.  [=ReadableStream/Set up=] |stream| with <a
    for="ReadableStream/set up"><var ignore>pullAlgorithm</var></a> set to |pull algorithm| and <a
    for="ReadableStream/set up"><var ignore>cancelAlgorithm</a> set to |cancel algorithm|.
1.  Return |stream|.

</div>

<code>multipart/form-data</code> parsing {#parsing}
===================================================

<div class="XXX">
  <p>🤷

  <p>Gecko and Chromium seem to have wildly different behaviors for
  <code highlight="js"><a interface>Body</a>.prototype.<a method for="Body">formData</a>()</code>,
  and there's also a Web Extensions API that parses <a><code>multipart/form-data</code></a> and that
  in both Gecko and Chromium seems to be completely independent from the parser in {{Body}} (see <a
  href="https://bugzilla.mozilla.org/show_bug.cgi?id=1697292">Gecko bug 1697292</a>):

  <xmp class="lang-js" style="color: #666666">
    chrome.webRequest.onBeforeRequest.addListener(
      (details) => {
        // Returns an object mapping names to an array of values represented by
        // either the string value or by the file's filename.
        console.log(details.requestBody.formData);
      },
      {urls: ["<all_urls>"]},
      ["requestBody"]
    );
  </xmp>
</div>
